from django.utils.translation import ugettext_lazy as _

from django.db import models
from django.db.models import permalink
from django.contrib.auth.models import User, Group

import datetime

import settings
encoding = settings.ENCODING



class Area(models.Model):
        name = models.CharField(max_length=100)

        def __unicode__(self):
                return self.name

class UserProfile(models.Model):
        user = models.ForeignKey(User, unique = True, db_index = True)
        manager = models.BooleanField(default = False)

        area = models.ForeignKey(Area, null=True, blank=True)

        def get_absolute_url(self):
		return ('user_info', (), {
			'username' : self.user.username
		})
	get_absolute_url = permalink(get_absolute_url)

        def __unicode__(self):
                return self.user.get_full_name() or self.user.username

        def get_user_profile(self):
                return ""


class Place(models.Model):
	city = models.CharField(max_length=100, verbose_name=_("place"))
	country = models.CharField(max_length=20, verbose_name=_("country"))
	class Meta:
		db_table = 'places'
		verbose_name = _("place")
		verbose_name_plural = _("places")

	def __unicode__(self):
		return "%s" % self.city

class Company(models.Model):
	name = models.CharField(unique=True, max_length=256, verbose_name=_("name"))
	abbreviation = models.CharField(unique=True, max_length=8, verbose_name=_("abbreviation"))
	address = models.CharField(blank=True, max_length=50, verbose_name=_("address"))
	place = models.ForeignKey(Place, verbose_name=_("place"))
	description = models.TextField(blank=True, verbose_name=_("description"))

	def __unicode__(self):
		return u"%s: %s" % (self.abbreviation, self.name)

	def __str__(self):
		return "%s: %s" % (self.abbreviation, self.name)

	

	class Meta:
		db_table = 'companies'
		verbose_name = _("company")
		verbose_name_plural = _("companies")
		ordering = ['abbreviation']

class Project(models.Model):
	company = models.ForeignKey(Company,
                verbose_name=_("company"))
	name = models.CharField(
                max_length=100,
                verbose_name=_("name"))
	code = models.CharField(
                max_length=100,
                null=True,
                blank=True,
                verbose_name=_("code"))
	abbreviation = models.CharField(unique=True,
                max_length=100,
                verbose_name=_("abbreviation"),
                help_text=_("Each timecard show related project abbreviation (you should include also the company abbreviation here)"),
	)
	start_date = models.DateField(verbose_name=_("start date"),
                help_text=_("Please use the following format: <em>YYYY-MM-DD</em>.")
	)
	end_date = models.DateField(
                verbose_name=_("end date"),
                help_text=_("Please use the following format: <em>YYYY-MM-DD</em>."),
                null=True, blank=True
        )
	description = models.TextField(
                blank=True,
                verbose_name=_("description")
        )

	def hours_amount(self):
		hours = 0
		for activity in self.projectactivity_set.all():
			hours += activity.hours_amount
		return hours

	def hours_to_be_planned(self):
		hours = datetime.timedelta(0)
		for activity in self.projectactivity_set.all():
			hours += activity.hours_to_be_planned()
		return hours
	hours_to_be_planned.short_description = _("to be planned hours")

	def hours_to_be_reported(self):
		hours = datetime.timedelta(0)
		for activity in self.projectactivity_set.all():
			hours += activity.hours_to_be_reported()
		return hours
	hours_to_be_reported.short_description = _("to be reported hours")

	def number_of_activities(self):
		return self.projectactivity_set.count()
	number_of_activities.short_description = _("activities")

	def number_of_nonclosed_activities(self):
		return self.projectactivity_set.exclude(status='40_closed').count()
	number_of_nonclosed_activities.short_description = _("open activities")

	def get_absolute_url(self):
		return ('project_info', (), {
			'pid' : self.id
		})
	get_absolute_url = permalink(get_absolute_url)

	def leader(self):
		try:
			return UserProject.objects.get(project=self, leader=True).user
		except:
			return None
	leader.short_description='leader'

        def members(self):
		return [ up.user for up in UserProject.objects.filter(project=self)]

	def __unicode__(self):
		return u"%s - %s" % (self.company.abbreviation, self.name)

	class Meta:
		db_table = 'projects'
		verbose_name = _("project")
		verbose_name_plural = _("projects")
		ordering = ['company__abbreviation','abbreviation']

	

#-------------------------------------------------------------------------------

STATUS_CHOICES = (
	("10_open", _("Open")),
	("20_something_done", _("Something done")),
	("30_almost_done", _("Almost done")),
	("40_closed", _("Closed"))
)

class ProjectActivity(models.Model):
	name = models.CharField(
                max_length=100,
                verbose_name=_("name"),
                db_index=True
        )
	project = models.ForeignKey(
                Project,
                verbose_name=_("project")#,
#		edit_inline=models.TABULAR,
#                num_in_admin=3,
#                num_extra_on_change=1
	)
	hours_amount = models.IntegerField(
                null=False,
                blank=False,
                verbose_name=_("hours amount")
        )
	due_date = models.DateField(
                verbose_name=_("date due"),
                help_text=_("Please use the following format: <em>YYYY-MM-DD</em>."),
                db_index=True
        )
	description = models.TextField(
                blank=True,
                verbose_name=_("description")
        )
	status = models.CharField(
                max_length=30,
                null=False,
                blank=False,
                verbose_name=_("status"),
                choices=STATUS_CHOICES,
        #        radio_admin=True,
                default=STATUS_CHOICES[0][0]
        )
	owner = models.ForeignKey(
                User,
                verbose_name=_("owner"), 
        )
	
	def get_absolute_url(self):
		return ('activity_info', (), {
			'aid' : self.id,
                        'pid' : self.project.id,
		})
	get_absolute_url = permalink(get_absolute_url)

	def __unicode__(self):
		return u"%s - %s" % (self.project.abbreviation, self.name)

	@property
	def company(self):
		return self.project.company

	def hours_planned(self):
		hours = datetime.timedelta(0)
		for activity in self.plannedactivity_set.all():
			hours += activity.hours()
		return hours
	hours_planned.short_description = _("planned hours")

	def hours_reported(self):
		hours = datetime.timedelta(0)
		for activity in self.reportedactivity_set.all():
			hours += activity.hours()
		return hours
	hours_reported.short_description = _("reported hours")

	def hours_to_be_planned(self):
		return datetime.timedelta(0, self.hours_amount*3600) - self.hours_planned()
	hours_to_be_planned.short_description = _("to be planned hours")

	def hours_summary(self):
		planned_hours=int(self.hours_planned().seconds / 3600)
		reported_hours=int(self.hours_reported().seconds / 3600)
		return "%d/%d/%d" % (self.hours_amount, planned_hours, reported_hours)
	hours_summary.short_description = _("hours summary")

	def days_left(self):
		return self.due_date - datetime.date.today()
	days_left.short_description = _("days left")

	def hours_to_be_reported(self):
		return datetime.timedelta(0, self.hours_amount*3600) - self.hours_reported()
	hours_to_be_reported.short_description = _("to be reported hours")

	def project_abbreviation(self):
		return self.project.abbreviation
	project_abbreviation.short_description = _("project")

	class Meta:
		db_table = 'project_activities'
		verbose_name = _("project activity")
		verbose_name_plural = _("project activities")
		unique_together = (("project", "name"),)
		ordering = ['project__company__abbreviation','project__abbreviation','status','due_date','name']

	

#-------------------------------------------------------------------------------

class UserProject(models.Model):
	user = models.ForeignKey(
                User,
                verbose_name=_("user")
        )
	project = models.ForeignKey(
                Project,
                verbose_name=_("project")#,
#                edit_inline=models.TABULAR,
#                num_in_admin=3,
#                num_extra_on_change=3
	)
	leader = models.BooleanField(default=False, null=False, verbose_name=_("leader"))

	def hours_planned(self):
		hours = datetime.timedelta(0)
		for activity in self.user.plannedactivity_set.filter(activity__project=self.project):
			hours += activity.hours()
		return hours
	hours_planned.short_description = _("planned hours")

	def hours_reported(self):
		hours = datetime.timedelta(0)
		for activity in self.user.reportedactivity_set.filter(activity__project=self.project):
			hours += activity.hours()
		return hours
	hours_reported.short_description = _("reported hours")

	def __unicode__(self):
		return u"%s <-> %s %s" % (self.project, self.user, ['','[leader]'][self.leader])

	def __str__(self):
		return "%s <-> %s %s" % (self.project, self.user, ['','[leader]'][self.leader])

	class Meta:
		db_table = 'memberships'
		verbose_name = _("user project")
		verbose_name_plural = _("user projects")
		unique_together = (("project", "user"),)
		ordering = ['project', 'user']

class ColorManager(models.Manager):
        def get_color(self, proj):
                try:
                        return "#%s" % ProjectColor.objects.get(project = proj).color
                except:
                        return "#%s" % settings.DEFAULT_COLOR

class ProjectColor(models.Model):
        project = models.ForeignKey(Project, unique = True, verbose_name=_('project'))
        color = models.TextField(verbose_name=_('color'))
        mgr = ColorManager()
        objects = models.Manager()

        def __unicode__(self):
                return "%s --> %s" %(self.project, self.color, )

	class Meta:
		verbose_name = _("project color")
		verbose_name_plural = _("project colors")
